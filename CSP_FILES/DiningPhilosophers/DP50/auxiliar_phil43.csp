---------------------------------------------------------
-- Side Condition FUNCTIONS --
---------------------------------------------------------

events_phil43 = union(inputs_phil43,outputs_phil43)
allInputs_phil43= Union({ inputs_phil43})
allOutputs_phil43 = Union({ outputs_phil43})
-- Filters inputs or outputs from a given set of events

filter_phil43(inout,S) =
	if inout == in then inter(allInputs_phil43,S) else inter(allOutputs_phil43,S)


HideOutputs_phil43 = phil43 \ outputs_phil43
HideInputs_phil43  = phil43 \ inputs_phil43
HideAll_phil43 = phil43 \ union(outputs_phil43,inputs_phil43)
CollapseOutputs_phil43 = phil43 [[ x <- o | x <- outputs_phil43 ]] \ allInputs_phil43

-- Renaming I/O
R_IO_phil43(a, b) = seq({(a.x, b.x) | x <- extensions(a), member(a.x, outputs_phil43)})
inputs_R_IO_phil43(a,b)  = inputs_phil43
outputs_R_IO_phil43(a,b) = { b.x | x <- extensions(a), member(a.x, outputs_phil43) }


-- Protocol Implementation
inputs_PROT_IMP_phil43(c)  = inter(inputs_phil43,{|c|})
outputs_PROT_IMP_phil43(c) = inter(outputs_phil43,{|c|})

-- Protocol Implementation and renaming
PROT_IMP_R_phil43(r)   = rename(phil43,r) --modifidado por sarah
inputs_PROT_IMP_R_phil43(e,r)   = replace(inputs_PROT_IMP_phil43(e), r)
outputs_PROT_IMP_R_phil43(e,r)   = replace(outputs_PROT_IMP_phil43(e), r)

--InBufferProt(P,c) =  CIO(P[[ c.in.x  <- i, c.out.y <- o | x  <- extensions(c.in), y  <- extensions(c.out)]])
InBufferProt_phil43(c) =  CIO(phil43[[ x  <- in, y <- out | x  <- inputs_phil43, y  <- outputs_phil43]])

-- Channels Projection
PROJECTION_phil43(cs) = phil43 \ (diff(Events, Union({ {| c |} | c <- cs})))


-- Protocol Implementation
PROT_IMP_def_phil43(c) = phil43 \ (diff(Events, {|c|}))

----assert ProtCheck(<PROCESS>,<CHANNEL>) :[deadlock free [FD]]
----------------------------------------
-- "... and nothing else matters..."
----------------------------------------
----assert <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) [T= <PROCESS>
----assert <PROCESS> [T= <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) 

----------------------------------------
-- Input Determinism
----------------------------------------
Clunking_phil43 = phil43 [| AllButClunk |] Clunker
RHS_InputDet_phil43 = (Clunking_phil43[|{clunk}|]Clunking_phil43) \ {clunk} [|AllButClunk|] Repeat

LHS_InputDet_phil43 = Deterministic(inputs_phil43)

--assert LHS_InputDet(<PROCESS>) [F= RHS_InputDet(<PROCESS>)

-----------------
-----------------

----------------------------------------
-- Strong output decisive
----------------------------------------

-- Roscoe's Strong output decisive
SSET_phil43(c) = inter({|c|},outputs_phil43)
F_phil43(c) = phil43 [| SSET_phil43(c) |] S(SSET_phil43(c)) 
G_phil43(c) = phil43 [| SSET_phil43(c) |] CHAOS(SSET_phil43(c))
--assert F(<PROCESS>,<CHANNEL>) [F= G(<PROCESS>,<CHANNEL>)


-----------------------------------------------------------------
-----------------------------------------------------------------

--PREVIOUS DEFINITIONS

--One2Many(S) = 
--    ([] x:diff(Events,union(S, {clunk})) @ x -> One2Many(S))
--    [] ([] c:S @ [] x:{|c|} @ x -> One2Many'(S,c,x))
--One2Many'(S,c,x) = [] y:{|c|} @ y -> if x==y then One2Many(S) else STOP
--RHS_OutputDec_A_phil43 = 
--    (Clunking_phil43[|diff(Events, outputs(P))|]Clunking_phil43) \ {clunk} 
--    [| AllButClunk |] 
--    One2Many(outputs_phil43)

-- Definition above is sliglty wrong because One2Many'(S,c,x) enforces the following event to be a repetition 
-- if the given c is not a channel bout the full event.

--NEW DEFINITIONS

One2Many_phil43 = 
    ([] x:diff(Events,union(outputs_phil43, {clunk})) @ x -> One2Many_phil43)
    [] ([] c:outputs_phil43 @ [] x:{|c|} @ x -> One2Many_phil43'(c,x))

One2Many_phil43'(c,x) = [] y:chan_phil43(c) @ y -> if x==y then One2Many_phil43 else STOP

RHS_OutputDec_A_phil43 = 
    (Clunking_phil43[|diff(Events, outputs_phil43)|]Clunking_phil43) \ {clunk} 
    [| AllButClunk |] 
    One2Many_phil43

-----------------------------------------------------------------
-----------------------------------------------------------------


LHS_OutputDec_A_phil43 = 
            STOP 
            |~|
            ([] x:diff(Events,union(outputs_phil43, {clunk})) @ x -> LHS_OutputDec_A_phil43)
            [] 
            ([] x:outputs_phil43 @ x -> (|~| y:chan_phil43(x) @ y -> LHS_OutputDec_A_phil43))


----------------------------------------------------
-- Part B. After trace s^<c.x> it might refuse all events on {|c|} \ {c.x}

FirstCopy_phil43 = phil43 [| AllButClunk |] DoubleClunker
SecondCopy_phil43 = phil43 [| AllButClunk |] clunk -> DoubleClunker

LHS_OutputDec_B_phil43(c) = (FirstCopy_phil43[|{clunk}|]SecondCopy_phil43)\{clunk} [|Events|] LHS_Test(inter({|c|}, outputs_phil43))

RHS_OutputDec_B_phil43(c) = (FirstCopy_phil43[|{clunk}|]SecondCopy_phil43)\{clunk} [|Events|] RHS_Test(inter({|c|}, outputs_phil43))

-- Outputs events with same prefixing of a given output event
chan_phil43(ev) = 
    inter(outputs_phil43,
          Union({ {| phil_right.43 | member (ev, {|phil_right.43|})|},
{| phil_left.43 | member (ev, {|phil_left.43|})|} })
)
