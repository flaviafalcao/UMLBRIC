---------------------------------------------------------
-- Side Condition FUNCTIONS --
---------------------------------------------------------

events_fork35 = union(inputs_fork35,outputs_fork35)
allInputs_fork35= Union({ inputs_fork35})
allOutputs_fork35 = Union({ outputs_fork35})
-- Filters inputs or outputs from a given set of events

filter_fork35(inout,S) =
	if inout == in then inter(allInputs_fork35,S) else inter(allOutputs_fork35,S)


HideOutputs_fork35 = fork35 \ outputs_fork35
HideInputs_fork35  = fork35 \ inputs_fork35
HideAll_fork35 = fork35 \ union(outputs_fork35,inputs_fork35)
CollapseOutputs_fork35 = fork35 [[ x <- o | x <- outputs_fork35 ]] \ allInputs_fork35

-- Renaming I/O
R_IO_fork35(a, b) = seq({(a.x, b.x) | x <- extensions(a), member(a.x, outputs_fork35)})
inputs_R_IO_fork35(a,b)  = inputs_fork35
outputs_R_IO_fork35(a,b) = { b.x | x <- extensions(a), member(a.x, outputs_fork35) }


-- Protocol Implementation
inputs_PROT_IMP_fork35(c)  = inter(inputs_fork35,{|c|})
outputs_PROT_IMP_fork35(c) = inter(outputs_fork35,{|c|})

-- Protocol Implementation and renaming
PROT_IMP_R_fork35(r)   = rename(fork35,r) --modifidado por sarah
inputs_PROT_IMP_R_fork35(e,r)   = replace(inputs_PROT_IMP_fork35(e), r)
outputs_PROT_IMP_R_fork35(e,r)   = replace(outputs_PROT_IMP_fork35(e), r)

--InBufferProt(P,c) =  CIO(P[[ c.in.x  <- i, c.out.y <- o | x  <- extensions(c.in), y  <- extensions(c.out)]])
InBufferProt_fork35(c) =  CIO(fork35[[ x  <- in, y <- out | x  <- inputs_fork35, y  <- outputs_fork35]])

-- Channels Projection
PROJECTION_fork35(cs) = fork35 \ (diff(Events, Union({ {| c |} | c <- cs})))


-- Protocol Implementation
PROT_IMP_def_fork35(c) = fork35 \ (diff(Events, {|c|}))

----assert ProtCheck(<PROCESS>,<CHANNEL>) :[deadlock free [FD]]
----------------------------------------
-- "... and nothing else matters..."
----------------------------------------
----assert <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) [T= <PROCESS>
----assert <PROCESS> [T= <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) 

----------------------------------------
-- Input Determinism
----------------------------------------
Clunking_fork35 = fork35 [| AllButClunk |] Clunker
RHS_InputDet_fork35 = (Clunking_fork35[|{clunk}|]Clunking_fork35) \ {clunk} [|AllButClunk|] Repeat

LHS_InputDet_fork35 = Deterministic(inputs_fork35)

--assert LHS_InputDet(<PROCESS>) [F= RHS_InputDet(<PROCESS>)

-----------------
-----------------

----------------------------------------
-- Strong output decisive
----------------------------------------

-- Roscoe's Strong output decisive
SSET_fork35(c) = inter({|c|},outputs_fork35)
F_fork35(c) = fork35 [| SSET_fork35(c) |] S(SSET_fork35(c)) 
G_fork35(c) = fork35 [| SSET_fork35(c) |] CHAOS(SSET_fork35(c))
--assert F(<PROCESS>,<CHANNEL>) [F= G(<PROCESS>,<CHANNEL>)


-----------------------------------------------------------------
-----------------------------------------------------------------

--PREVIOUS DEFINITIONS

--One2Many(S) = 
--    ([] x:diff(Events,union(S, {clunk})) @ x -> One2Many(S))
--    [] ([] c:S @ [] x:{|c|} @ x -> One2Many'(S,c,x))
--One2Many'(S,c,x) = [] y:{|c|} @ y -> if x==y then One2Many(S) else STOP
--RHS_OutputDec_A_fork35 = 
--    (Clunking_fork35[|diff(Events, outputs(P))|]Clunking_fork35) \ {clunk} 
--    [| AllButClunk |] 
--    One2Many(outputs_fork35)

-- Definition above is sliglty wrong because One2Many'(S,c,x) enforces the following event to be a repetition 
-- if the given c is not a channel bout the full event.

--NEW DEFINITIONS

One2Many_fork35 = 
    ([] x:diff(Events,union(outputs_fork35, {clunk})) @ x -> One2Many_fork35)
    [] ([] c:outputs_fork35 @ [] x:{|c|} @ x -> One2Many_fork35'(c,x))

One2Many_fork35'(c,x) = [] y:chan_fork35(c) @ y -> if x==y then One2Many_fork35 else STOP

RHS_OutputDec_A_fork35 = 
    (Clunking_fork35[|diff(Events, outputs_fork35)|]Clunking_fork35) \ {clunk} 
    [| AllButClunk |] 
    One2Many_fork35

-----------------------------------------------------------------
-----------------------------------------------------------------


LHS_OutputDec_A_fork35 = 
            STOP 
            |~|
            ([] x:diff(Events,union(outputs_fork35, {clunk})) @ x -> LHS_OutputDec_A_fork35)
            [] 
            ([] x:outputs_fork35 @ x -> (|~| y:chan_fork35(x) @ y -> LHS_OutputDec_A_fork35))


----------------------------------------------------
-- Part B. After trace s^<c.x> it might refuse all events on {|c|} \ {c.x}

FirstCopy_fork35 = fork35 [| AllButClunk |] DoubleClunker
SecondCopy_fork35 = fork35 [| AllButClunk |] clunk -> DoubleClunker

LHS_OutputDec_B_fork35(c) = (FirstCopy_fork35[|{clunk}|]SecondCopy_fork35)\{clunk} [|Events|] LHS_Test(inter({|c|}, outputs_fork35))

RHS_OutputDec_B_fork35(c) = (FirstCopy_fork35[|{clunk}|]SecondCopy_fork35)\{clunk} [|Events|] RHS_Test(inter({|c|}, outputs_fork35))

-- Outputs events with same prefixing of a given output event
chan_fork35(ev) = 
    inter(outputs_fork35,
          Union({ {| fork_left.46 | member (ev, {|fork_left.46|})|},
{| fork_right.46 | member (ev, {|fork_right.46|})|} })
)
