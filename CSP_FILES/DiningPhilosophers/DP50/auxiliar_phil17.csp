---------------------------------------------------------
-- Side Condition FUNCTIONS --
---------------------------------------------------------

events_phil17 = union(inputs_phil17,outputs_phil17)
allInputs_phil17= Union({ inputs_phil17})
allOutputs_phil17 = Union({ outputs_phil17})
-- Filters inputs or outputs from a given set of events

filter_phil17(inout,S) =
	if inout == in then inter(allInputs_phil17,S) else inter(allOutputs_phil17,S)


HideOutputs_phil17 = phil17 \ outputs_phil17
HideInputs_phil17  = phil17 \ inputs_phil17
HideAll_phil17 = phil17 \ union(outputs_phil17,inputs_phil17)
CollapseOutputs_phil17 = phil17 [[ x <- o | x <- outputs_phil17 ]] \ allInputs_phil17

-- Renaming I/O
R_IO_phil17(a, b) = seq({(a.x, b.x) | x <- extensions(a), member(a.x, outputs_phil17)})
inputs_R_IO_phil17(a,b)  = inputs_phil17
outputs_R_IO_phil17(a,b) = { b.x | x <- extensions(a), member(a.x, outputs_phil17) }


-- Protocol Implementation
inputs_PROT_IMP_phil17(c)  = inter(inputs_phil17,{|c|})
outputs_PROT_IMP_phil17(c) = inter(outputs_phil17,{|c|})

-- Protocol Implementation and renaming
PROT_IMP_R_phil17(r)   = rename(phil17,r) --modifidado por sarah
inputs_PROT_IMP_R_phil17(e,r)   = replace(inputs_PROT_IMP_phil17(e), r)
outputs_PROT_IMP_R_phil17(e,r)   = replace(outputs_PROT_IMP_phil17(e), r)

--InBufferProt(P,c) =  CIO(P[[ c.in.x  <- i, c.out.y <- o | x  <- extensions(c.in), y  <- extensions(c.out)]])
InBufferProt_phil17(c) =  CIO(phil17[[ x  <- in, y <- out | x  <- inputs_phil17, y  <- outputs_phil17]])

-- Channels Projection
PROJECTION_phil17(cs) = phil17 \ (diff(Events, Union({ {| c |} | c <- cs})))


-- Protocol Implementation
PROT_IMP_def_phil17(c) = phil17 \ (diff(Events, {|c|}))

----assert ProtCheck(<PROCESS>,<CHANNEL>) :[deadlock free [FD]]
----------------------------------------
-- "... and nothing else matters..."
----------------------------------------
----assert <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) [T= <PROCESS>
----assert <PROCESS> [T= <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) 

----------------------------------------
-- Input Determinism
----------------------------------------
Clunking_phil17 = phil17 [| AllButClunk |] Clunker
RHS_InputDet_phil17 = (Clunking_phil17[|{clunk}|]Clunking_phil17) \ {clunk} [|AllButClunk|] Repeat

LHS_InputDet_phil17 = Deterministic(inputs_phil17)

--assert LHS_InputDet(<PROCESS>) [F= RHS_InputDet(<PROCESS>)

-----------------
-----------------

----------------------------------------
-- Strong output decisive
----------------------------------------

-- Roscoe's Strong output decisive
SSET_phil17(c) = inter({|c|},outputs_phil17)
F_phil17(c) = phil17 [| SSET_phil17(c) |] S(SSET_phil17(c)) 
G_phil17(c) = phil17 [| SSET_phil17(c) |] CHAOS(SSET_phil17(c))
--assert F(<PROCESS>,<CHANNEL>) [F= G(<PROCESS>,<CHANNEL>)


-----------------------------------------------------------------
-----------------------------------------------------------------

--PREVIOUS DEFINITIONS

--One2Many(S) = 
--    ([] x:diff(Events,union(S, {clunk})) @ x -> One2Many(S))
--    [] ([] c:S @ [] x:{|c|} @ x -> One2Many'(S,c,x))
--One2Many'(S,c,x) = [] y:{|c|} @ y -> if x==y then One2Many(S) else STOP
--RHS_OutputDec_A_phil17 = 
--    (Clunking_phil17[|diff(Events, outputs(P))|]Clunking_phil17) \ {clunk} 
--    [| AllButClunk |] 
--    One2Many(outputs_phil17)

-- Definition above is sliglty wrong because One2Many'(S,c,x) enforces the following event to be a repetition 
-- if the given c is not a channel bout the full event.

--NEW DEFINITIONS

One2Many_phil17 = 
    ([] x:diff(Events,union(outputs_phil17, {clunk})) @ x -> One2Many_phil17)
    [] ([] c:outputs_phil17 @ [] x:{|c|} @ x -> One2Many_phil17'(c,x))

One2Many_phil17'(c,x) = [] y:chan_phil17(c) @ y -> if x==y then One2Many_phil17 else STOP

RHS_OutputDec_A_phil17 = 
    (Clunking_phil17[|diff(Events, outputs_phil17)|]Clunking_phil17) \ {clunk} 
    [| AllButClunk |] 
    One2Many_phil17

-----------------------------------------------------------------
-----------------------------------------------------------------


LHS_OutputDec_A_phil17 = 
            STOP 
            |~|
            ([] x:diff(Events,union(outputs_phil17, {clunk})) @ x -> LHS_OutputDec_A_phil17)
            [] 
            ([] x:outputs_phil17 @ x -> (|~| y:chan_phil17(x) @ y -> LHS_OutputDec_A_phil17))


----------------------------------------------------
-- Part B. After trace s^<c.x> it might refuse all events on {|c|} \ {c.x}

FirstCopy_phil17 = phil17 [| AllButClunk |] DoubleClunker
SecondCopy_phil17 = phil17 [| AllButClunk |] clunk -> DoubleClunker

LHS_OutputDec_B_phil17(c) = (FirstCopy_phil17[|{clunk}|]SecondCopy_phil17)\{clunk} [|Events|] LHS_Test(inter({|c|}, outputs_phil17))

RHS_OutputDec_B_phil17(c) = (FirstCopy_phil17[|{clunk}|]SecondCopy_phil17)\{clunk} [|Events|] RHS_Test(inter({|c|}, outputs_phil17))

-- Outputs events with same prefixing of a given output event
chan_phil17(ev) = 
    inter(outputs_phil17,
          Union({ {| phil_right.16 | member (ev, {|phil_right.16|})|},
{| phil_left.16 | member (ev, {|phil_left.16|})|} })
)
