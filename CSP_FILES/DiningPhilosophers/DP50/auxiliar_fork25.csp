---------------------------------------------------------
-- Side Condition FUNCTIONS --
---------------------------------------------------------

events_fork25 = union(inputs_fork25,outputs_fork25)
allInputs_fork25= Union({ inputs_fork25})
allOutputs_fork25 = Union({ outputs_fork25})
-- Filters inputs or outputs from a given set of events

filter_fork25(inout,S) =
	if inout == in then inter(allInputs_fork25,S) else inter(allOutputs_fork25,S)


HideOutputs_fork25 = fork25 \ outputs_fork25
HideInputs_fork25  = fork25 \ inputs_fork25
HideAll_fork25 = fork25 \ union(outputs_fork25,inputs_fork25)
CollapseOutputs_fork25 = fork25 [[ x <- o | x <- outputs_fork25 ]] \ allInputs_fork25

-- Renaming I/O
R_IO_fork25(a, b) = seq({(a.x, b.x) | x <- extensions(a), member(a.x, outputs_fork25)})
inputs_R_IO_fork25(a,b)  = inputs_fork25
outputs_R_IO_fork25(a,b) = { b.x | x <- extensions(a), member(a.x, outputs_fork25) }


-- Protocol Implementation
inputs_PROT_IMP_fork25(c)  = inter(inputs_fork25,{|c|})
outputs_PROT_IMP_fork25(c) = inter(outputs_fork25,{|c|})

-- Protocol Implementation and renaming
PROT_IMP_R_fork25(r)   = rename(fork25,r) --modifidado por sarah
inputs_PROT_IMP_R_fork25(e,r)   = replace(inputs_PROT_IMP_fork25(e), r)
outputs_PROT_IMP_R_fork25(e,r)   = replace(outputs_PROT_IMP_fork25(e), r)

--InBufferProt(P,c) =  CIO(P[[ c.in.x  <- i, c.out.y <- o | x  <- extensions(c.in), y  <- extensions(c.out)]])
InBufferProt_fork25(c) =  CIO(fork25[[ x  <- in, y <- out | x  <- inputs_fork25, y  <- outputs_fork25]])

-- Channels Projection
PROJECTION_fork25(cs) = fork25 \ (diff(Events, Union({ {| c |} | c <- cs})))


-- Protocol Implementation
PROT_IMP_def_fork25(c) = fork25 \ (diff(Events, {|c|}))

----assert ProtCheck(<PROCESS>,<CHANNEL>) :[deadlock free [FD]]
----------------------------------------
-- "... and nothing else matters..."
----------------------------------------
----assert <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) [T= <PROCESS>
----assert <PROCESS> [T= <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) 

----------------------------------------
-- Input Determinism
----------------------------------------
Clunking_fork25 = fork25 [| AllButClunk |] Clunker
RHS_InputDet_fork25 = (Clunking_fork25[|{clunk}|]Clunking_fork25) \ {clunk} [|AllButClunk|] Repeat

LHS_InputDet_fork25 = Deterministic(inputs_fork25)

--assert LHS_InputDet(<PROCESS>) [F= RHS_InputDet(<PROCESS>)

-----------------
-----------------

----------------------------------------
-- Strong output decisive
----------------------------------------

-- Roscoe's Strong output decisive
SSET_fork25(c) = inter({|c|},outputs_fork25)
F_fork25(c) = fork25 [| SSET_fork25(c) |] S(SSET_fork25(c)) 
G_fork25(c) = fork25 [| SSET_fork25(c) |] CHAOS(SSET_fork25(c))
--assert F(<PROCESS>,<CHANNEL>) [F= G(<PROCESS>,<CHANNEL>)


-----------------------------------------------------------------
-----------------------------------------------------------------

--PREVIOUS DEFINITIONS

--One2Many(S) = 
--    ([] x:diff(Events,union(S, {clunk})) @ x -> One2Many(S))
--    [] ([] c:S @ [] x:{|c|} @ x -> One2Many'(S,c,x))
--One2Many'(S,c,x) = [] y:{|c|} @ y -> if x==y then One2Many(S) else STOP
--RHS_OutputDec_A_fork25 = 
--    (Clunking_fork25[|diff(Events, outputs(P))|]Clunking_fork25) \ {clunk} 
--    [| AllButClunk |] 
--    One2Many(outputs_fork25)

-- Definition above is sliglty wrong because One2Many'(S,c,x) enforces the following event to be a repetition 
-- if the given c is not a channel bout the full event.

--NEW DEFINITIONS

One2Many_fork25 = 
    ([] x:diff(Events,union(outputs_fork25, {clunk})) @ x -> One2Many_fork25)
    [] ([] c:outputs_fork25 @ [] x:{|c|} @ x -> One2Many_fork25'(c,x))

One2Many_fork25'(c,x) = [] y:chan_fork25(c) @ y -> if x==y then One2Many_fork25 else STOP

RHS_OutputDec_A_fork25 = 
    (Clunking_fork25[|diff(Events, outputs_fork25)|]Clunking_fork25) \ {clunk} 
    [| AllButClunk |] 
    One2Many_fork25

-----------------------------------------------------------------
-----------------------------------------------------------------


LHS_OutputDec_A_fork25 = 
            STOP 
            |~|
            ([] x:diff(Events,union(outputs_fork25, {clunk})) @ x -> LHS_OutputDec_A_fork25)
            [] 
            ([] x:outputs_fork25 @ x -> (|~| y:chan_fork25(x) @ y -> LHS_OutputDec_A_fork25))


----------------------------------------------------
-- Part B. After trace s^<c.x> it might refuse all events on {|c|} \ {c.x}

FirstCopy_fork25 = fork25 [| AllButClunk |] DoubleClunker
SecondCopy_fork25 = fork25 [| AllButClunk |] clunk -> DoubleClunker

LHS_OutputDec_B_fork25(c) = (FirstCopy_fork25[|{clunk}|]SecondCopy_fork25)\{clunk} [|Events|] LHS_Test(inter({|c|}, outputs_fork25))

RHS_OutputDec_B_fork25(c) = (FirstCopy_fork25[|{clunk}|]SecondCopy_fork25)\{clunk} [|Events|] RHS_Test(inter({|c|}, outputs_fork25))

-- Outputs events with same prefixing of a given output event
chan_fork25(ev) = 
    inter(outputs_fork25,
          Union({ {| fork_left.34 | member (ev, {|fork_left.34|})|},
{| fork_right.34 | member (ev, {|fork_right.34|})|} })
)
