---------------------------------------------------------
-- Side Condition FUNCTIONS --
---------------------------------------------------------

events_CONTROL0 = union(inputs_CONTROL0,outputs_CONTROL0)
allInputs_CONTROL0= Union({ inputs_CONTROL0})
allOutputs_CONTROL0 = Union({ outputs_CONTROL0})
-- Filters inputs or outputs from a given set of events

filter_CONTROL0(inout,S) =
	if inout == in then inter(allInputs_CONTROL0,S) else inter(allOutputs_CONTROL0,S)


HideOutputs_CONTROL0 = CONTROL0 \ outputs_CONTROL0
HideInputs_CONTROL0  = CONTROL0 \ inputs_CONTROL0
HideAll_CONTROL0 = CONTROL0 \ union(outputs_CONTROL0,inputs_CONTROL0)
CollapseOutputs_CONTROL0 = CONTROL0 [[ x <- o | x <- outputs_CONTROL0 ]] \ allInputs_CONTROL0

-- Renaming I/O
R_IO_CONTROL0(a, b) = seq({(a.x, b.x) | x <- extensions(a), member(a.x, outputs_CONTROL0)})
inputs_R_IO_CONTROL0(a,b)  = inputs_CONTROL0
outputs_R_IO_CONTROL0(a,b) = { b.x | x <- extensions(a), member(a.x, outputs_CONTROL0) }


-- Protocol Implementation
inputs_PROT_IMP_CONTROL0(c)  = inter(inputs_CONTROL0,{|c|})
outputs_PROT_IMP_CONTROL0(c) = inter(outputs_CONTROL0,{|c|})

-- Protocol Implementation and renaming
PROT_IMP_R_CONTROL0(r)   = rename(CONTROL0,r) --modifidado por sarah
inputs_PROT_IMP_R_CONTROL0(e,r)   = replace(inputs_PROT_IMP_CONTROL0(e), r)
outputs_PROT_IMP_R_CONTROL0(e,r)   = replace(outputs_PROT_IMP_CONTROL0(e), r)

--InBufferProt(P,c) =  CIO(P[[ c.in.x  <- i, c.out.y <- o | x  <- extensions(c.in), y  <- extensions(c.out)]])
InBufferProt_CONTROL0(c) =  CIO(CONTROL0[[ x  <- in, y <- out | x  <- inputs_CONTROL0, y  <- outputs_CONTROL0]])

-- Channels Projection
PROJECTION_CONTROL0(cs) = CONTROL0 \ (diff(Events, Union({ {| c |} | c <- cs})))


-- Protocol Implementation
PROT_IMP_def_CONTROL0(c) = CONTROL0 \ (diff(Events, {|c|}))

----assert ProtCheck(<PROCESS>,<CHANNEL>) :[deadlock free [FD]]
----------------------------------------
-- "... and nothing else matters..."
----------------------------------------
----assert <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) [T= <PROCESS>
----assert <PROCESS> [T= <PROCESS> [| Events |] (<PROCESS> ||| RUN(NOT(<CHANNEL>))) 

----------------------------------------
-- Input Determinism
----------------------------------------
Clunking_CONTROL0 = CONTROL0 [| AllButClunk |] Clunker
RHS_InputDet_CONTROL0 = (Clunking_CONTROL0[|{clunk}|]Clunking_CONTROL0) \ {clunk} [|AllButClunk|] Repeat

LHS_InputDet_CONTROL0 = Deterministic(inputs_CONTROL0)

--assert LHS_InputDet(<PROCESS>) [F= RHS_InputDet(<PROCESS>)

-----------------
-----------------

----------------------------------------
-- Strong output decisive
----------------------------------------

-- Roscoe's Strong output decisive
SSET_CONTROL0(c) = inter({|c|},outputs_CONTROL0)
F_CONTROL0(c) = CONTROL0 [| SSET_CONTROL0(c) |] S(SSET_CONTROL0(c)) 
G_CONTROL0(c) = CONTROL0 [| SSET_CONTROL0(c) |] CHAOS(SSET_CONTROL0(c))
--assert F(<PROCESS>,<CHANNEL>) [F= G(<PROCESS>,<CHANNEL>)


-----------------------------------------------------------------
-----------------------------------------------------------------

--PREVIOUS DEFINITIONS

--One2Many(S) = 
--    ([] x:diff(Events,union(S, {clunk})) @ x -> One2Many(S))
--    [] ([] c:S @ [] x:{|c|} @ x -> One2Many'(S,c,x))
--One2Many'(S,c,x) = [] y:{|c|} @ y -> if x==y then One2Many(S) else STOP
--RHS_OutputDec_A_CONTROL0 = 
--    (Clunking_CONTROL0[|diff(Events, outputs(P))|]Clunking_CONTROL0) \ {clunk} 
--    [| AllButClunk |] 
--    One2Many(outputs_CONTROL0)

-- Definition above is sliglty wrong because One2Many'(S,c,x) enforces the following event to be a repetition 
-- if the given c is not a channel bout the full event.

--NEW DEFINITIONS

One2Many_CONTROL0 = 
    ([] x:diff(Events,union(outputs_CONTROL0, {clunk})) @ x -> One2Many_CONTROL0)
    [] ([] c:outputs_CONTROL0 @ [] x:{|c|} @ x -> One2Many_CONTROL0'(c,x))

One2Many_CONTROL0'(c,x) = [] y:chan_CONTROL0(c) @ y -> if x==y then One2Many_CONTROL0 else STOP

RHS_OutputDec_A_CONTROL0 = 
    (Clunking_CONTROL0[|diff(Events, outputs_CONTROL0)|]Clunking_CONTROL0) \ {clunk} 
    [| AllButClunk |] 
    One2Many_CONTROL0

-----------------------------------------------------------------
-----------------------------------------------------------------


LHS_OutputDec_A_CONTROL0 = 
            STOP 
            |~|
            ([] x:diff(Events,union(outputs_CONTROL0, {clunk})) @ x -> LHS_OutputDec_A_CONTROL0)
            [] 
            ([] x:outputs_CONTROL0 @ x -> (|~| y:chan_CONTROL0(x) @ y -> LHS_OutputDec_A_CONTROL0))


----------------------------------------------------
-- Part B. After trace s^<c.x> it might refuse all events on {|c|} \ {c.x}

FirstCopy_CONTROL0 = CONTROL0 [| AllButClunk |] DoubleClunker
SecondCopy_CONTROL0 = CONTROL0 [| AllButClunk |] clunk -> DoubleClunker

LHS_OutputDec_B_CONTROL0(c) = (FirstCopy_CONTROL0[|{clunk}|]SecondCopy_CONTROL0)\{clunk} [|Events|] LHS_Test(inter({|c|}, outputs_CONTROL0))

RHS_OutputDec_B_CONTROL0(c) = (FirstCopy_CONTROL0[|{clunk}|]SecondCopy_CONTROL0)\{clunk} [|Events|] RHS_Test(inter({|c|}, outputs_CONTROL0))

-- Outputs events with same prefixing of a given output event
chan_CONTROL0(ev) = 
    inter(outputs_CONTROL0,
          Union({ {| port_control.0 | member (ev, {|port_control.0|})|},
{| port_env.0 | member (ev, {|port_env.0|})|} })
)
